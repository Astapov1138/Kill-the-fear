using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.UI;
using static Gun;


public class InventoryManager : MonoBehaviour
{

    private List<AmmunitionGunSlot> am_gun_slots = new List<AmmunitionGunSlot>();

    private RectTransform am_UI;






    private void Start()
    {

        am_UI = GameObject.Find("AmmunitionUI").GetComponent<RectTransform>();

        // Получаем все слоты для огнестрельного оружия
        for (int i = 0; i < am_UI.childCount; i++)
        {
            if (am_UI.GetChild(i).GetComponent<AmmunitionGunSlot>() != null)
            {
                am_gun_slots.Add(am_UI.GetChild(i).GetComponent<AmmunitionGunSlot>());
            }
        }

        GameObject.Find("Inventory").SetActive(false);

    }









    public void PutItem(Item item, GameObject itemObj)
    {
        bool SuccessGunAddition = false;

        foreach (AmmunitionGunSlot slot in am_gun_slots)
        {
            // Если передаваемый объект является оружием
            if (item.itemType == ItemType.gun)
                PutGunItem(item, itemObj, slot, out SuccessGunAddition);

            
            if (SuccessGunAddition)
            {
                // Возвращаю дефолтное состояние
                SuccessGunAddition = false;

                return;
            }
            
        }
    }









    private void PutGunItem(Item item, GameObject TransmittedObject, AmmunitionGunSlot slot, out bool SuccessGunAddition)
    {
        SuccessGunAddition = false;

        if (slot.SlotIsEmpty)
        {
            if (item.itemType == ItemType.gun)
            {

                // Получаю картинку в слоте, которая будет отображать оружие
                Transform gunImageTransform = slot.transform.GetChild(2);




                /*
                 *  Устанавливаю объект представляющий вещь, которую я передаю
                */




                // Устанавливаю этот объект как child объект картинки, которая его отображает
                TransmittedObject.transform.SetParent(gunImageTransform);


                TransmittedObject.GetComponent<SpriteRenderer>().sprite = null;



                /*
                 *  Устанавливаю изображение оружия, которое передал в слот
                */




                // Устанавливаю картинку в оружия, которое передал в слот
                gunImageTransform.GetComponent<Image>().sprite = item.GetInventoryIcon;

                gunImageTransform.GetComponent<Image>().enabled = true;





                /*
                 * Настраиваю скрипт слота
                */



                // Передаю в слот предмет и представляющий его объект 
                slot.SetItem(item, TransmittedObject);




                /*
                 * Успешное завершение передачи оружия в слот 
                */ 




                // Добавление предмета прошло успешно
                SuccessGunAddition = true;

            }
            else
            {
                // Данный предмет не является оружием, поэтому его нельзя добавить в этот слот
                SuccessGunAddition = false;
            }
        }
        else
        {
            // Слот занят. Добавление прошло не успешно
            SuccessGunAddition = false;
        }
    }










    //          предмет, который передаем,         куда передаём,          выходной результат    
    public void PutWeaponToSlot(Item item, GameObject TransmittedObject, AmmunitionGunSlot slot, out bool GunIsAdded)
    { 
        GunIsAdded = false;

        
        if (item.itemType != ItemType.gun)
        {
            // Предмет не является оружием, добавление прошло не успешно 
            GunIsAdded = false;
        }
        else 
        {
            if (slot.SlotIsEmpty)
            {

                // Получаю Transform картинки, в которую хочу передать предмет
                Transform InputImageTransform = slot.transform.GetChild(2);

                // Получаю Transform картинки, текущей картинки передаваемого предмета
                Transform currentImageTransform = TransmittedObject.transform.parent;

                




                /*
                 * Получаю и устанавливаю объект, который отображает передаваемый предмет 
                */




                // Устанавливаю передаваемый объект на картинку слота, в который мы передаём (как child объект)
                TransmittedObject.transform.SetParent(InputImageTransform);





                /*
                 * Устанавливаю изображение в слот, в который передали и включаю её
                */



                InputImageTransform.GetComponent<Image>().sprite = item.GetInventoryIcon;

                InputImageTransform.GetComponent<Image>().enabled = true;




                /*
                 * Настраиваю скрипт слота, в который передали 
                */



                // Передаю в слот предмет и представляющий его объект
                slot.SetItem(item, TransmittedObject);









                /*
                 * Настраиваю скрипт слота, из которого передавали предмет 
                */


                // Очищаю слот 
                currentImageTransform.parent.gameObject.GetComponent<AmmunitionGunSlot>().ClearClot();



                /*
                 * Настраиваю картинку слота, из которой передавали предмет  
                */


                // Удаляю изображение предмета, который передавали
                currentImageTransform.GetComponent<Image>().sprite = null;

                // Возвращаю картинку дефолтное на место
                currentImageTransform.position = currentImageTransform.parent.gameObject.GetComponent<AmmunitionGunSlot>().SlotDefaultPosition;

                // Делаю ее неактивной
                currentImageTransform.GetComponent<Image>().enabled = false;






                /*
                 * Успешная передача предмета
                */



                // Добавление предмета прошло успешно
                GunIsAdded = true;

            }
            else
            {





                // Получаю Transform картинки, в которую хочу передать предмет
                Transform InputImageTransform = slot.transform.GetChild(2);

                // Получаю Transform картинки, текущей картинки передаваемого предмета
                Transform currentImageTransform = TransmittedObject.transform.parent;

                // Получаю слот исходной картинки
                AmmunitionGunSlot currentSlot = currentImageTransform.parent.GetComponent<AmmunitionGunSlot>();

                // Получаю слот входной картинки 
                AmmunitionGunSlot inputSlot = InputImageTransform.parent.GetComponent<AmmunitionGunSlot>();







                /*
                 * Меняю местами объекты 
                */





                //Получаю объект предмета, который находится во входном слоте
                GameObject InternalObject = InputImageTransform.GetChild(0).gameObject;

                InternalObject.transform.SetParent(currentImageTransform);

                TransmittedObject.transform.SetParent(InputImageTransform);






                /*
                 * Меняю местами картинки  
                */






                // Изменяю исходную картинку 
                currentImageTransform.GetComponent<Image>().sprite = currentImageTransform.GetChild(0).GetComponent<FloorItem>().getItem.GetInventoryIcon;

                // Изменяю входную картинку
                InputImageTransform.GetComponent<Image>().sprite = InputImageTransform.GetChild(0).GetComponent<FloorItem>().getItem.GetInventoryIcon;

                // Возвращаю исходную картинку на место
                currentImageTransform.position = currentSlot.SlotDefaultPosition;






                /*
                 * Настраиваю скрипты слотов, в который передали 
                */






                // Получаю объект, который сейчас находится в CurrentSlot
                GameObject gm_current = currentImageTransform.GetChild(0).transform.gameObject;

                // Получаю предмет, который сейчас находится в CurrentSlot
                Item item_current = gm_current.GetComponent<FloorItem>().getItem;

                // Устанавливаю их в новый слот
                currentSlot.SetItem(item_current, gm_current);



                // Получаю объект, который сейчас находится в InputSlot
                GameObject gm_input = InputImageTransform.GetChild(0).transform.gameObject;

                // Получаю предмет, который сейчас находится в CurrentSlot
                Item item_input = gm_input.GetComponent<FloorItem>().getItem;

                // Устанавливаю их в новый слот 
                inputSlot.SetItem(item_input, gm_input); 






                /*
                 * Успешная передача предмета
                */


                // Замена предмета прошла успешно
                GunIsAdded = true;

            }
        }


    }


    public void DropItemFromInventory(Item item, GameObject currentObject, Slot slot, out bool SuccessDrop)
    { 
        SuccessDrop = false;

        if (item != null && currentObject != null)
        {



            /*
             * Настраиваю слот предмета 
            */



            slot.ClearClot();





            /*
             * Убираю картинку предмету в инвентаре
            */





            // Получаю картинку
            Image image_component = currentObject.transform.parent.gameObject.GetComponent<Image>();

            // Убираю картинку
            image_component.sprite = null;

            // Делаю картинку неактивной
            image_component.enabled = false;





            /*
             *  Ставлю картинку на дефолтное место
            */

            // Получаю объект картинки
            GameObject image_obj = currentObject.transform.parent.gameObject;

            // Ставлю на дефолтное место 
            image_obj.transform.position = slot.SlotDefaultPosition;





            /*
             * Выбрасываем предмет из инвентаря 
            */





            // Поднимаю его на вершину иерархии 
            currentObject.transform.SetParent(null);

            // Устанавливаю выброшенному объекту позицию игрока
            currentObject.transform.position = GameObject.FindGameObjectWithTag("Player").transform.position;





            /*
             * Устанавливаю спрайт предмету 
            */





            // Получаю спрайт предмета
            Sprite item_floor_image = item.GetFloorIcon;

            // Устанавливаю спрайт
            currentObject.GetComponent<SpriteRenderer>().sprite = item_floor_image;





            /*
             * Успешное завершение
            */




            SuccessDrop = true;





        }
    }


}
